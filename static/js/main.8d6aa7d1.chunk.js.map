{"version":3,"sources":["App.module.css","components/Game/Grid/Cell/Cell.module.css","components/Game/Grid/Grid.module.css","components/Controls/Controls.module.css","components/Game/Grid/Cell/Cell.tsx","components/Game/Grid/Grid.tsx","components/Game/hooks/useGameState/tickGameState.ts","components/Game/hooks/useGameState.ts","components/Game/hooks/useGameState/gameStateActions.ts","components/Game/Game.tsx","components/Game/hooks/useGameTick.ts","components/Game/hooks/useSetStateOnResize.ts","components/Game/hooks/useToggleCellCallback.ts","components/Controls/Controls.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Cell","alive","column","row","onPress","data-testid","className","styles","cell","undefined","filter","v","join","onMouseDown","React","memo","PureCell","Grid","gameState","rows","columns","cellSize","onCellPressed","cells","callback","result","index","push","forEachCell","style","gridTemplateColumns","gridTemplateRows","tickGame","state","map","_","neighbours","cellIndex","Math","floor","onBottomEdge","onLeftEdge","onRightEdge","countNeighbouringCells","gameStateReducer","action","type","setAction","newState","toggleAction","tickGameState","tickAction","console","warn","Game","ticksPerSecond","useReducer","dispatch","dispatcher","useEffect","intervalId","setInterval","clearInterval","useGameTick","Array","fill","useSetStateOnResize","useCallback","useToggleCellCallback","Controls","props","onRows","useNumberInput","onSetRows","onColumns","onSetColumns","onSpeed","onSetSpeed","onClick","onPause","disabled","playing","onPlay","htmlFor","id","onInput","value","min","max","speed","step","toFixed","event","number","target","valueAsNumber","App","initialValue","useState","setValue","setTrue","setFalse","useSetBool","setRows","setColumns","setSpeed","controls","game","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d6aa7d1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__13Z--\",\"controls\":\"App_controls__3G04N\",\"game\":\"App_game__6XBjV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell\":\"Cell_cell__DjG-Q\",\"alive\":\"Cell_alive__2HSt9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Grid\":\"Grid_Grid__1tGCR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Controls\":\"Controls_Controls__1rS1X\"};","import React from \"react\";\r\nimport styles from \"./Cell.module.css\";\r\n\r\nexport interface CellProps {\r\n    row: number;\r\n    column: number;\r\n    alive: CellAlive;\r\n    onPress?: (row: number, column: number) => void;\r\n}\r\n\r\n/**\r\n * A game Cell that is either dead or alive.\r\n */\r\nexport function Cell({\r\n    alive, column, row, onPress\r\n}: CellProps) {\r\n    const onPressHandler = () => {\r\n        onPress && onPress(row, column);\r\n    }\r\n\r\n    return <button\r\n        data-testid={`Cell[${row},${column}]`}\r\n        className={[\r\n            styles.cell,\r\n            alive ? styles.alive : undefined\r\n        ].filter(v => v).join(' ')}\r\n        onMouseDown={onPress && onPressHandler}\r\n    >{/*column.toString().padStart(2, '0')}<br />{row.toString().padStart(2, '0')*/}</button>;\r\n}\r\n","import React from \"react\";\r\nimport {Cell as PureCell, CellProps} from \"./Cell/Cell\";\r\nimport styles from \"./Grid.module.css\";\r\n\r\nconst Cell = React.memo(PureCell);\r\n\r\nexport interface GridProps {\r\n    gameState: GameState;\r\n    rows: number;\r\n    columns: number;\r\n    cellSize?: number;\r\n    onCellPressed?: CellProps['onPress'];\r\n}\r\n\r\n/**\r\n * Grid lays out each Cell.\r\n */\r\nexport function Grid({\r\n    gameState,\r\n    rows,\r\n    columns,\r\n    cellSize=50,\r\n    onCellPressed,\r\n}: GridProps) {\r\n\r\n    const cells = forEachCell(rows, columns, (row, column, index) => {\r\n        return <Cell\r\n            key={`${row}x${column}`}\r\n            alive={gameState[index]}\r\n            row={row}\r\n            column={column}\r\n            onPress={onCellPressed}\r\n        />;\r\n    });\r\n\r\n    return <div\r\n        data-testid='Grid'\r\n        className={styles.Grid}\r\n        style={{\r\n            gridTemplateColumns: `repeat(${columns}, ${cellSize}px)`,\r\n            gridTemplateRows: `repeat(${rows}, ${cellSize}px)`,\r\n        }}\r\n    >{cells}</div>;\r\n}\r\n\r\nfunction forEachCell<\r\n    Callback extends (row: number, column: number, index: number) => any\r\n>(\r\n    rows: number,\r\n    columns: number,\r\n    callback: Callback\r\n) {\r\n    const result = [] as ReturnType<Callback>[];\r\n    let index = 0;\r\n    for (let row = 0; row < rows; row++) {\r\n        for (let column = 0; column < columns; column++) {\r\n            result.push(callback(row, column, index++));\r\n        }\r\n    }\r\n    return result;\r\n}\r\n","/**\r\n * Returns a new version of the passed GameState, with cells flipped to conform to the rules.\r\n *\r\n * Any live cell with fewer than two live neighbours dies, as if by underpopulation.\r\n * Any live cell with two or three live neighbours lives on to the next generation.\r\n * Any live cell with more than three live neighbours dies, as if by overpopulation.\r\n * Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.\r\n *\r\n * @link https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life#Rules\r\n */\r\nexport function tickGame(state: GameState, rows: number, columns: number): GameState {\r\n    return state.map((_, index) => {\r\n        const neighbours = countNeighbouringCells(index, state, rows, columns);\r\n        const alive = state[index];\r\n\r\n        if (alive) return neighbours === 2 || neighbours === 3;\r\n        return neighbours === 3;\r\n    });\r\n}\r\nexport default tickGame;\r\n\r\nexport function countNeighbouringCells(\r\n    cellIndex: number,\r\n    state: GameState,\r\n    rows: number,\r\n    columns: number\r\n) {\r\n    let result = 0;\r\n    const row = Math.floor(cellIndex / columns);\r\n    const column = cellIndex % rows;\r\n\r\n    // On an edge?\r\n    const onTopEdge = row === 0;\r\n    const onBottomEdge = row+1 === rows;\r\n    const onLeftEdge = column === 0;\r\n    const onRightEdge = column+1 === columns;\r\n\r\n    if (!onTopEdge) {\r\n        // Shift index back by the number of columns to reach Cell above. If true, count it.\r\n        if (state[cellIndex - columns]) result++; // Top\r\n        if (!onLeftEdge && state[(cellIndex - columns) - 1]) result++; // Top left\r\n        if (!onRightEdge && state[(cellIndex - columns) + 1]) result++; // Top right\r\n    }\r\n    if (!onBottomEdge) {\r\n        // Shift index forwards by the number of columns to reach Cell below. If true, count it.\r\n        if (state[cellIndex + columns]) result++; // Bottom\r\n        if (!onLeftEdge && state[(cellIndex + columns) - 1]) result++; // Bottom left\r\n        if (!onRightEdge && state[(cellIndex + columns) + 1]) result++; // Bottom right\r\n    }\r\n    if (!onLeftEdge && state[cellIndex - 1]) result++; // Left\r\n    if (!onRightEdge && state[cellIndex + 1]) result++; // Right\r\n\r\n    return result;\r\n}\r\n","import React from \"react\";\r\nimport {\r\n    GameStateAction,\r\n    setAction,\r\n    toggleAction,\r\n    tickAction\r\n} from \"./useGameState/gameStateActions\";\r\n\r\nexport default function useGameState() {\r\n    return React.useReducer(gameStateReducer, []);\r\n}\r\n\r\nfunction gameStateReducer(state: GameState, action: GameStateAction) {\r\n    switch (action.type) {\r\n        case 'set': return setAction(action);\r\n        case 'toggle': return toggleAction(action, state);\r\n        case 'tick': return tickAction(action, state);\r\n    }\r\n    console.warn('Unknown gameStateReducer action', action);\r\n    return state;\r\n}\r\n","import tickGameState from \"./tickGameState\";\r\n\r\nexport type GameStateAction = GameStateSetAction | GameStateToggleAction | GameStateTickAction;\r\ninterface GameStateActionBase {\r\n    type: string;\r\n}\r\n\r\n/**\r\n * Set the state to a specific value.\r\n */\r\nexport function setAction(action: GameStateSetAction) {\r\n    return action.state;\r\n}\r\nexport interface GameStateSetAction extends GameStateActionBase {\r\n    type: 'set';\r\n    state: GameState;\r\n}\r\n\r\n/**\r\n * Toggle the state on a specific cell\r\n */\r\nexport function toggleAction(action: GameStateToggleAction, state: GameState) {\r\n    const index = (action as GameStateToggleAction).index;\r\n    const newState = [...state];\r\n    newState[index] = !newState[index];\r\n    return newState;\r\n}\r\nexport interface GameStateToggleAction extends GameStateActionBase {\r\n    type: 'toggle';\r\n    index: number;\r\n}\r\n\r\n/**\r\n * Tick the state of the game.\r\n */\r\nexport function tickAction(action: GameStateTickAction, state: GameState) {\r\n    return tickGameState(state, action.rows, action.columns);\r\n}\r\nexport interface GameStateTickAction extends GameStateActionBase {\r\n    type: 'tick';\r\n    columns: number;\r\n    rows: number;\r\n}\r\n","import React from \"react\";\r\nimport {Grid} from \"./Grid/Grid\";\r\nimport useGameState from \"./hooks/useGameState\";\r\nimport useSetStateOnResize from \"./hooks/useSetStateOnResize\";\r\nimport useGameTick from \"./hooks/useGameTick\";\r\nimport useToggleCellCallback from \"./hooks/useToggleCellCallback\";\r\n\r\nexport interface GameProps {\r\n    rows: number;\r\n    columns: number;\r\n    cellSize?: number;\r\n    ticksPerSecond?: number;\r\n}\r\n\r\n/**\r\n * The component that manages the game state.\r\n */\r\nexport function Game({\r\n    rows,\r\n    columns,\r\n    cellSize = 20,\r\n    ticksPerSecond = 0.5\r\n}: GameProps) {\r\n    const [gameState, dispatch] = useGameState();\r\n    useGameTick(ticksPerSecond, rows, columns, dispatch); // Tick game state\r\n    useSetStateOnResize(rows, columns, dispatch); // Update state if grid resized\r\n    const onCellPressed = useToggleCellCallback(rows, columns, dispatch); // On cell pressed, toggle it\r\n\r\n    return <div data-testid='Game'>\r\n        <Grid\r\n            gameState={gameState}\r\n            rows={rows}\r\n            columns={columns}\r\n            cellSize={cellSize}\r\n            onCellPressed={onCellPressed}\r\n        />\r\n    </div>;\r\n}\r\n","import React from \"react\";\r\nimport {GameStateTickAction} from \"./useGameState/gameStateActions\";\r\n\r\nexport default function useGameTick(\r\n    ticksPerSecond: number,\r\n    rows: number,\r\n    columns: number,\r\n    dispatcher: React.Dispatch<GameStateTickAction>\r\n) {\r\n    React.useEffect(() => {\r\n        if (ticksPerSecond > 0) {\r\n            const intervalId = setInterval(\r\n                () => dispatcher({type: 'tick', columns, rows}),\r\n                1000 / ticksPerSecond\r\n            );\r\n            return () => clearInterval(intervalId);\r\n        }\r\n    }, [ticksPerSecond, columns, rows, dispatcher]);\r\n}\r\n","import React from \"react\";\r\nimport {GameStateSetAction} from \"./useGameState/gameStateActions\";\r\n\r\nexport default function useSetStateOnResize(\r\n    rows: number,\r\n    columns: number,\r\n    dispatcher: React.Dispatch<GameStateSetAction>\r\n) {\r\n    React.useEffect(() => {\r\n        dispatcher({\r\n            type: 'set',\r\n            state: Array(rows * columns).fill(false),\r\n        });\r\n    }, [rows, columns, dispatcher]);\r\n}\r\n","import React from \"react\";\r\nimport {GameStateToggleAction} from \"./useGameState/gameStateActions\";\r\n\r\nexport default function useToggleCellCallback(\r\n    rows: number,\r\n    columns: number,\r\n    dispatcher: React.Dispatch<GameStateToggleAction>\r\n) {\r\n    return React.useCallback((row: number, column: number) => {\r\n        dispatcher({\r\n            type: 'toggle',\r\n            index: column + (row * columns),\r\n        });\r\n    }, [columns, dispatcher]);\r\n}\r\n","import React, {FormEvent} from \"react\";\r\nimport styles from \"./Controls.module.css\";\r\n\r\nconst ROWS_MIN = 10, COLUMNS_MIN = 10;\r\nconst ROWS_MAX = 80, COLUMNS_MAX = 80;\r\nconst SPEED_MIN = 0.1, SPEED_MAX = 10, SPEED_STEP = 0.1;\r\n\r\nexport interface ControlsProps {\r\n    playing: boolean;\r\n    rows: number;\r\n    columns: number;\r\n    speed: number;\r\n\r\n    onPause: () => void;\r\n    onPlay: () => void;\r\n    onSetRows: (rows: number) => void;\r\n    onSetColumns: (columns: number) => void;\r\n    onSetSpeed: (speed: number) => void;\r\n}\r\nexport function Controls(props: ControlsProps) {\r\n    const onRows = useNumberInput(props.onSetRows);\r\n    const onColumns = useNumberInput(props.onSetColumns);\r\n    const onSpeed = useNumberInput(props.onSetSpeed);\r\n\r\n    return <div className={styles.Controls}>\r\n        <div>\r\n            <button data-testid=\"pause-btn\" onClick={props.onPause} disabled={!props.playing}>Pause</button>\r\n            <button data-testid=\"play-btn\"  onClick={props.onPlay}  disabled={ props.playing}>Play</button>\r\n\r\n            <label htmlFor=\"columns-input\">Columns:</label>\r\n            <input\r\n                id=\"columns-input\"\r\n                data-testid=\"columns-input\"\r\n                onInput={onColumns}\r\n                value={props.columns}\r\n                type=\"number\"\r\n                min={ROWS_MIN}\r\n                max={ROWS_MAX}\r\n            />\r\n\r\n            <label htmlFor=\"rows-input\">Rows:</label>\r\n            <input\r\n                id=\"rows-input\"\r\n                data-testid=\"rows-input\"\r\n                onInput={onRows}\r\n                value={props.rows}\r\n                type=\"number\"\r\n                min={COLUMNS_MIN}\r\n                max={COLUMNS_MAX}\r\n            />\r\n\r\n        </div>\r\n        <div>\r\n            <label htmlFor=\"speed-input\">Speed: </label>\r\n            <input\r\n                id=\"speed-input\"\r\n                data-testid=\"speed-input\"\r\n                onInput={onSpeed}\r\n                value={props.speed}\r\n                type=\"range\"\r\n                step={SPEED_STEP}\r\n                min={SPEED_MIN}\r\n                max={SPEED_MAX}\r\n            /> {/** TODO Make slider exponential */}\r\n            <span>{props.speed.toFixed(1)} ticks per second.</span>\r\n\r\n        </div>\r\n    </div>;\r\n}\r\n\r\nfunction useNumberInput(\r\n    callback: (num: number) => void\r\n) {\r\n    return React.useCallback((event: FormEvent) => {\r\n        const input = event.target as HTMLInputElement;\r\n        const number = input.valueAsNumber;\r\n        callback(number || 0);\r\n    }, [callback]);\r\n}\r\n","import React from 'react';\r\nimport {Game} from \"./components/Game/Game\";\r\nimport {Controls} from \"./components/Controls/Controls\";\r\nimport styles from \"./App.module.css\";\r\n\r\n// TODO Add Error Boundary\r\n\r\nfunction App() {\r\n    const playing = useSetBool(false);\r\n    const [rows, setRows] = React.useState(25);\r\n    const [columns, setColumns] = React.useState(25);\r\n    const [speed, setSpeed] = React.useState(3);\r\n\r\n    return <div className={styles.App}>\r\n\r\n        <h1>Conway's Game of Life</h1>\r\n\r\n        <div className={styles.controls}>\r\n            <Controls\r\n                playing={playing.value}\r\n                rows={rows}\r\n                columns={columns}\r\n                speed={speed}\r\n\r\n                onPause={playing.setFalse}\r\n                onPlay={playing.setTrue}\r\n                onSetRows={setRows}\r\n                onSetColumns={setColumns}\r\n                onSetSpeed={setSpeed}\r\n            />\r\n        </div>\r\n\r\n        <div className={styles.game}>\r\n            <Game\r\n                rows={rows}\r\n                columns={columns}\r\n                ticksPerSecond={playing.value ? speed : 0}\r\n            />\r\n        </div>\r\n\r\n    </div>;\r\n}\r\n\r\nexport default App;\r\n\r\nfunction useSetBool(\r\n    initialValue: boolean\r\n) {\r\n    const [value, setValue] = React.useState(initialValue);\r\n    const setTrue = React.useCallback(() => setValue(true), [setValue]);\r\n    const setFalse = React.useCallback(() => setValue(false), [setValue]);\r\n    return { value, setValue, setTrue, setFalse };\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}